// lib/core/network/api_client.dart
import 'dart:io';

import 'package:dio/dio.dart';
import 'package:dio_cache_interceptor/dio_cache_interceptor.dart';
import 'package:flutter/foundation.dart';
import 'package:http_cache_file_store/http_cache_file_store.dart';
import 'package:path_provider/path_provider.dart';
import 'package:path/path.dart' as p;
import 'package:shared_preferences/shared_preferences.dart';

import 'package:booka_app/constants.dart';

class ApiClient {
  static late Dio _dio;
  static bool _initialized = false;

  /// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫—ç—à–∞ (—ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —Ä—É—á–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏/—É–¥–∞–ª–µ–Ω–∏—è).
  static late CacheStore cacheStore;

  /// –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –∫—ç—à–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏, –º–æ–∂–µ—Ç –±—ã—Ç—å null –Ω–∞ web/–ø–∞–º—è—Ç–∏).
  static String? cachePath;

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ‚Äî –≤—ã–∑–≤–∞—Ç—å –≤ main() –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ApiClient.i()
  static Future<void> init({
    int fileCacheMaxSizeBytes = 128 * 1024 * 1024, // –∞–∫—Ç—É–∞–ª—å–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è MemCacheStore (web/fallback)
    Duration defaultMaxStale = const Duration(hours: 12),
  }) async {
    if (_initialized) return;

    final options = BaseOptions(
      baseUrl: BASE_URL,
      connectTimeout: const Duration(seconds: 8),
      receiveTimeout: const Duration(seconds: 12),
      sendTimeout: const Duration(seconds: 12),
      headers: const {'Accept': 'application/json'},
      responseType: ResponseType.json,
    );

    final dio = Dio(options);

    // Web -> –ø–∞–º—è—Ç—å; –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã -> —Ñ–∞–π–ª–æ–≤—ã–π –∫—ç—à (fallback –≤ –ø–∞–º—è—Ç—å)
    if (kIsWeb) {
      cacheStore = MemCacheStore(maxSize: fileCacheMaxSizeBytes);
      cachePath = null;
      if (kDebugMode) debugPrint('ApiClient: using MemCacheStore (web)');
    } else {
      try {
        final tmpDir = await getTemporaryDirectory();
        final dirPath = p.join(tmpDir.path, 'dio_cache');
        final dir = Directory(dirPath);
        if (!await dir.exists()) {
          await dir.create(recursive: true);
        }
        cacheStore = FileCacheStore(dirPath); // http_cache_file_store: —Ç–æ–ª—å–∫–æ –ø—É—Ç—å
        cachePath = dirPath;
        if (kDebugMode) debugPrint('ApiClient: using FileCacheStore at $dirPath');
      } catch (e) {
        cacheStore = MemCacheStore(maxSize: fileCacheMaxSizeBytes);
        cachePath = null;
        if (kDebugMode) {
          debugPrint('ApiClient: using MemCacheStore (fallback). Reason: $e');
        }
      }
    }

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –∫—ç—à–∞ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å per-request).
    final defaultCacheOptions = CacheOptions(
      store: cacheStore,
      policy: CachePolicy.request,
      hitCacheOnErrorCodes: const [500, 502, 503, 504],
      hitCacheOnNetworkFailure: true,
      maxStale: defaultMaxStale,
      priority: CachePriority.normal,
      allowPostMethod: false,
    );

    dio.interceptors.add(DioCacheInterceptor(options: defaultCacheOptions));

    // Authorization interceptor ‚Äî –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º token –∏–∑ SharedPreferences.
    dio.interceptors.add(
      InterceptorsWrapper(
        onRequest: (options, handler) async {
          try {
            final prefs = await SharedPreferences.getInstance();
            final token = prefs.getString('token');
            if (token != null && token.isNotEmpty) {
              options.headers['Authorization'] = 'Bearer $token';
            }
          } catch (_) {}
          handler.next(options);
        },
      ),
    );

    // –ü—Ä–æ—Å—Ç–æ–π retry –¥–ª—è GET (–ø—Ä–∏ 502/503/504).
    dio.interceptors.add(
      InterceptorsWrapper(
        onError: (err, handler) async {
          final req = err.requestOptions;
          final status = err.response?.statusCode;
          final isGet = req.method.toUpperCase() == 'GET';
          if (isGet && status != null && {502, 503, 504}.contains(status)) {
            try {
              await Future<void>.delayed(const Duration(milliseconds: 400));
              final cloneResp = await dio.fetch(req);
              return handler.resolve(cloneResp);
            } catch (_) {}
          }
          handler.next(err);
        },
      ),
    );

    // Debug-–ª–æ–≥–∏ —Å –ø–æ–º–µ—Ç–∫–æ–π HIT/MISS.
    if (kDebugMode) {
      dio.interceptors.add(
        InterceptorsWrapper(
          onRequest: (o, h) {
            debugPrint('‚û°Ô∏è ${o.method} ${o.uri}');
            if (o.data != null) debugPrint('body: ${o.data}');
            h.next(o);
          },
          onResponse: (r, h) {
            final mark = cacheMark(r);
            debugPrint('‚úÖ [$mark] ${r.statusCode} ${r.requestOptions.uri}');
            h.next(r);
          },
          onError: (e, h) {
            debugPrint('‚ùå ${e.response?.statusCode} ${e.requestOptions.uri} ‚Äî ${e.message}');
            h.next(e);
          },
        ),
      );
    }

    _dio = dio;
    _initialized = true;
  }

  static Dio i() {
    if (!_initialized) {
      throw StateError('ApiClient not initialized. Call ApiClient.init() in main() before using.');
    }
    return _dio;
  }

  /// Per-request CacheOptions (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —á–µ—Ä–µ–∑ `.toOptions()` –≤ Dio).
  static CacheOptions cacheOptions({
    CachePolicy policy = CachePolicy.request,
    Duration? maxStale,
    List<int>? hitCacheOnErrorCodes,
    bool hitCacheOnNetworkFailure = true,
    CachePriority priority = CachePriority.normal,
    bool allowPostMethod = false,
  }) {
    return CacheOptions(
      store: cacheStore,
      policy: policy,
      maxStale: maxStale ?? const Duration(hours: 12),
      hitCacheOnErrorCodes: hitCacheOnErrorCodes ?? const [500, 502, 503, 504],
      hitCacheOnNetworkFailure: hitCacheOnNetworkFailure,
      priority: priority,
      allowPostMethod: allowPostMethod,
    );
  }

  /// –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à.
  static Future<void> clearAllCache() async {
    await cacheStore.clean();
  }

  /// –£–¥–∞–ª–∏—Ç—å –∫—ç—à-–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ path+queryParams.
  static Future<void> deleteCacheFor(
      String path, {
        Map<String, dynamic>? queryParameters,
      }) async {
    final base = Uri.parse(BASE_URL);
    final qp = (queryParameters ?? {})
        .map((k, v) => MapEntry(k, v?.toString()));

    Uri url;
    if (path.startsWith('http://') || path.startsWith('https://')) {
      url = Uri.parse(path).replace(queryParameters: qp);
    } else if (path.startsWith('/')) {
      url = base.replace(path: path, queryParameters: qp);
    } else {
      url = base.resolve(path).replace(queryParameters: qp);
    }

    // –í 4.x builder –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.
    final cacheKey = CacheOptions.defaultCacheKeyBuilder(url: url, headers: null);
    await cacheStore.delete(cacheKey);
  }

  /// ===== –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∞ =====

  /// true, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∏—à—ë–ª –∏–∑ –∫—ç—à–∞ (–∞ –Ω–µ –∏–∑ —Å–µ—Ç–∏).
  static bool wasFromCache(Response r) {
    final fromNetwork = r.extra[extraFromNetworkKey] == true; // '@fromNetwork@'
    final hasKey = r.extra[extraCacheKey] != null;            // '@cache_key@'
    return hasKey && !fromNetwork;
  }

  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É-–ø–æ–º–µ—Ç–∫—É 'HIT(cache)' / 'MISS(net)'.
  static String cacheMark(Response r) => wasFromCache(r) ? 'HIT(cache)' : 'MISS(net)';

  /// –ü–µ—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–ø–∫–µ –∫—ç—à–∞ (–∫–æ–ª-–≤–æ —Ñ–∞–π–ª–æ–≤ –∏ —Ä–∞–∑–º–µ—Ä).
  static Future<void> debugPrintCacheDirInfo() async {
    if (cachePath == null) {
      debugPrint('Cache dir is null (web –∏–ª–∏ MemCacheStore).');
      return;
    }
    final dir = Directory(cachePath!);
    if (!await dir.exists()) {
      debugPrint('Cache dir not found: $cachePath');
      return;
    }
    int files = 0;
    int bytes = 0;
    await for (final ent in dir.list(recursive: true, followLinks: false)) {
      if (ent is File) {
        files++;
        bytes += await ent.length();
      }
    }
    debugPrint('üì¶ Cache dir: $files files, ${(bytes / 1024).toStringAsFixed(1)} KB at $cachePath');
  }
}
